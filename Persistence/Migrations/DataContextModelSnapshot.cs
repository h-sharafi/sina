// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.AboutUs", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("TeamId")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("AboutUses");
                });

            modelBuilder.Entity("Domain.AccessAbleFile", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("AccessAbleFiless");
                });

            modelBuilder.Entity("Domain.ActionData", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionNameLocalized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowAnonymous")
                        .HasColumnType("bit");

                    b.Property<short>("ControllerDataId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDontSideBarShow")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresAuthorization")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresHttpPost")
                        .HasColumnType("bit");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ControllerDataId");

                    b.HasIndex("CreationUserId");

                    b.ToTable("ActionDatas");
                });

            modelBuilder.Entity("Domain.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short?>("AboutUsId")
                        .HasColumnType("smallint");

                    b.Property<short?>("AccessAbleFileId")
                        .HasColumnType("smallint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<short?>("ActionDataId")
                        .HasColumnType("smallint");

                    b.Property<short?>("AudioCmsId")
                        .HasColumnType("smallint");

                    b.Property<short?>("CommentId")
                        .HasColumnType("smallint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ContentId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ContentTypeId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ControllerDataId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<short?>("FileCategoryId")
                        .HasColumnType("smallint");

                    b.Property<short?>("FileId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ImageCmsId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ImageCmsTypeId")
                        .HasColumnType("smallint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LoggingEventId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<short?>("PaperId")
                        .HasColumnType("smallint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<short?>("PodcastId")
                        .HasColumnType("smallint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SideBarId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SiteDetailId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SiteSettingId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SliderId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SliderTypeId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SocialClassId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SocialNetworkId")
                        .HasColumnType("smallint");

                    b.Property<short?>("TeamId")
                        .HasColumnType("smallint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<short?>("UploadInfoId")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<short?>("VideoId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AboutUsId");

                    b.HasIndex("AccessAbleFileId");

                    b.HasIndex("ActionDataId");

                    b.HasIndex("AudioCmsId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("ControllerDataId");

                    b.HasIndex("FileCategoryId");

                    b.HasIndex("FileId");

                    b.HasIndex("ImageCmsId");

                    b.HasIndex("ImageCmsTypeId");

                    b.HasIndex("LoggingEventId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PaperId");

                    b.HasIndex("PodcastId");

                    b.HasIndex("SideBarId");

                    b.HasIndex("SiteDetailId");

                    b.HasIndex("SiteSettingId");

                    b.HasIndex("SliderId");

                    b.HasIndex("SliderTypeId");

                    b.HasIndex("SocialClassId");

                    b.HasIndex("SocialNetworkId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UploadInfoId");

                    b.HasIndex("VideoId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.AudioCms", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AudioCmsType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<short>("FileId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FileId");

                    b.ToTable("AudioCmses");
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("ContentId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("CreationUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.AccessAbleFile>", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("AppUserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("AccessAbleFileModifiedUser");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.ActionData>", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("AppUserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("ActionDataModifiedUser");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.ControllerData>", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("AppUserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("ControllerDataModifiedUser");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.File>", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("AppUserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("FileModifiedUser");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.Paper>", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("AppUserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("PaperModifiedUser");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.Podcast>", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("AppUserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("PodcastModifiedUser");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.SiteDetail>", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("AppUserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("SiteDetailModifiedUser");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.Video>", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("AppUserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("VideoModifiedUser");
                });

            modelBuilder.Entity("Domain.Content", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("ContentTypeId")
                        .HasColumnType("smallint");

                    b.Property<short>("CoverImageId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainPage")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ProfileImageId")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProfileImageId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("Domain.ContentType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainPage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("ContentTypes");
                });

            modelBuilder.Entity("Domain.ControllerData", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ControllerIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerNameLocalized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerNamespace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDontSideBarShow")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresAuthorization")
                        .HasColumnType("bit");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("ControllerDatas");
                });

            modelBuilder.Entity("Domain.File", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("AccessAbleFileId")
                        .HasColumnType("smallint");

                    b.Property<string>("CartTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<short?>("FileCategoryId")
                        .HasColumnType("smallint");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPodcast")
                        .HasColumnType("bit");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SliderId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessAbleFileId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FileCategoryId");

                    b.HasIndex("SliderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Domain.FileCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ParentId")
                        .HasColumnType("smallint");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("FileCategorys");
                });

            modelBuilder.Entity("Domain.ImageCms", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<short>("FileId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FileId");

                    b.ToTable("ImageCmses");
                });

            modelBuilder.Entity("Domain.ImageCmsType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<string>("HtmlText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("ImageCmsTypes");
                });

            modelBuilder.Entity("Domain.LoggingEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CreationUserId");

                    b.ToTable("LoggingEvents");
                });

            modelBuilder.Entity("Domain.Paper", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Domain.Podcast", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("Domain.SideBar", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ParentId")
                        .HasColumnType("smallint");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("SideBars");
                });

            modelBuilder.Entity("Domain.SiteDetail", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("SiteDetails");
                });

            modelBuilder.Entity("Domain.SiteSetting", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<short?>("FavIconId")
                        .HasColumnType("smallint");

                    b.Property<short?>("FooterLogoId")
                        .HasColumnType("smallint");

                    b.Property<string>("FooterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightConditionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SiteLogoId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FavIconId")
                        .IsUnique()
                        .HasFilter("[FavIconId] IS NOT NULL");

                    b.HasIndex("FooterLogoId")
                        .IsUnique()
                        .HasFilter("[FooterLogoId] IS NOT NULL");

                    b.HasIndex("SiteLogoId")
                        .IsUnique()
                        .HasFilter("[SiteLogoId] IS NOT NULL");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("Domain.Slider", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SliderTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("SliderTypeId");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Domain.SliderType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<short>("Interval")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Keyboard")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SliderCarouselType")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("SliderTypes");
                });

            modelBuilder.Entity("Domain.SocialClass", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<string>("FaClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("SocialClasses");
                });

            modelBuilder.Entity("Domain.SocialNetwork", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<string>("FaClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SiteSettingId")
                        .HasColumnType("smallint");

                    b.Property<short?>("TeamId")
                        .HasColumnType("smallint");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("SiteSettingId");

                    b.HasIndex("TeamId");

                    b.ToTable("SocialNetworks");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BreifKnowledge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short?>("ProfileImageId")
                        .HasColumnType("smallint");

                    b.Property<string>("TeamAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ProfileImageId");

                    b.HasIndex("TeamAppUserId")
                        .IsUnique()
                        .HasFilter("[TeamAppUserId] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Domain.UploadInfo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<short>("FileId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.Property<int>("TotalUploads")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("UploadInfos");
                });

            modelBuilder.Entity("Domain.Video", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DisplaySort")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.AboutUs", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AccessAbleFile", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.ActionData", b =>
                {
                    b.HasOne("Domain.ControllerData", "ControllerData")
                        .WithMany("ActionsList")
                        .HasForeignKey("ControllerDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.HasOne("Domain.AboutUs", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("AboutUsId");

                    b.HasOne("Domain.AccessAbleFile", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("AccessAbleFileId");

                    b.HasOne("Domain.ActionData", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("ActionDataId");

                    b.HasOne("Domain.AudioCms", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("AudioCmsId");

                    b.HasOne("Domain.Comment", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("CommentId");

                    b.HasOne("Domain.Content", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("ContentId");

                    b.HasOne("Domain.ContentType", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("ContentTypeId");

                    b.HasOne("Domain.ControllerData", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("ControllerDataId");

                    b.HasOne("Domain.FileCategory", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("FileCategoryId");

                    b.HasOne("Domain.File", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("FileId");

                    b.HasOne("Domain.ImageCms", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("ImageCmsId");

                    b.HasOne("Domain.ImageCmsType", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("ImageCmsTypeId");

                    b.HasOne("Domain.LoggingEvent", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("LoggingEventId");

                    b.HasOne("Domain.Paper", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("PaperId");

                    b.HasOne("Domain.Podcast", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("PodcastId");

                    b.HasOne("Domain.SideBar", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("SideBarId");

                    b.HasOne("Domain.SiteDetail", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("SiteDetailId");

                    b.HasOne("Domain.SiteSetting", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("SiteSettingId");

                    b.HasOne("Domain.Slider", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("SliderId");

                    b.HasOne("Domain.SliderType", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("SliderTypeId");

                    b.HasOne("Domain.SocialClass", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("SocialClassId");

                    b.HasOne("Domain.SocialNetwork", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("SocialNetworkId");

                    b.HasOne("Domain.Team", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("TeamId");

                    b.HasOne("Domain.UploadInfo", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("UploadInfoId");

                    b.HasOne("Domain.Video", null)
                        .WithMany("ModifiedUser")
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("Domain.AudioCms", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("Comments")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.AccessAbleFile>", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("AccessAbleFileModifiedUser")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AccessAbleFile", "Entity")
                        .WithMany("AccessAbleFileModifiedUser")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.ActionData>", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("ActionDataModifiedUser")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ActionData", "Entity")
                        .WithMany("ActionDataModifiedUser")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.ControllerData>", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("ControllerDataModifiedUser")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ControllerData", "Entity")
                        .WithMany("ControllerDataModifiedUser")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.File>", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("FileModifiedUser")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.File", "Entity")
                        .WithMany("FileModifiedUser")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.Paper>", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("PaperModifiedUser")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Paper", "Entity")
                        .WithMany("PaperModifiedUser")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.Podcast>", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("PodcastModifiedUser")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Podcast", "Entity")
                        .WithMany("PodcastModifiedUser")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.SiteDetail>", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("SiteDetailModifiedUsers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SiteDetail", "Entity")
                        .WithMany("SiteDetailModifiedUsers")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Common.ModifiedUser<Domain.Video>", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("VideoModifiedUser")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Video", "Entity")
                        .WithMany("VideoModifiedUser")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Content", b =>
                {
                    b.HasOne("Domain.ContentType", "ContentType")
                        .WithMany("Conetnts")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.File", "CoverImage")
                        .WithMany("ContentCoverImages")
                        .HasForeignKey("CoverImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.File", "ProfileImage")
                        .WithMany("ContentProfileImages")
                        .HasForeignKey("ProfileImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ContentType", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.ControllerData", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.File", b =>
                {
                    b.HasOne("Domain.AccessAbleFile", null)
                        .WithMany("Files")
                        .HasForeignKey("AccessAbleFileId");

                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.FileCategory", "FileCategory")
                        .WithMany("Files")
                        .HasForeignKey("FileCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Slider", "Slider")
                        .WithMany("Files")
                        .HasForeignKey("SliderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.FileCategory", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.FileCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.ImageCms", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ImageCmsType", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.LoggingEvent", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.Paper", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.Podcast", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.SideBar", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.SideBar", "Parent")
                        .WithMany("Childeren")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Domain.SiteDetail", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.SiteSetting", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.File", "FavIcon")
                        .WithOne("FavIconSetting")
                        .HasForeignKey("Domain.SiteSetting", "FavIconId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.File", "FooterLogo")
                        .WithOne("FooterLogoSiteSetting")
                        .HasForeignKey("Domain.SiteSetting", "FooterLogoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.File", "SiteLogo")
                        .WithOne("LogoSiteSetting")
                        .HasForeignKey("Domain.SiteSetting", "SiteLogoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Slider", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.SliderType", "SliderType")
                        .WithMany("Sliders")
                        .HasForeignKey("SliderTypeId");
                });

            modelBuilder.Entity("Domain.SliderType", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.SocialClass", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Domain.SocialNetwork", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.SiteSetting", "SiteSetting")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("SiteSettingId");

                    b.HasOne("Domain.Team", "Team")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany("CreationTeams")
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.File", "ProfileImage")
                        .WithMany("Teams")
                        .HasForeignKey("ProfileImageId");

                    b.HasOne("Domain.AppUser", "TeamAppUser")
                        .WithOne("Team")
                        .HasForeignKey("Domain.Team", "TeamAppUserId");
                });

            modelBuilder.Entity("Domain.UploadInfo", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Video", b =>
                {
                    b.HasOne("Domain.AppUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
